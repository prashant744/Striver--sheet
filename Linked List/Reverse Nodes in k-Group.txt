/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    void reverse(ListNode* start , ListNode *end){
        ListNode *prev=nullptr,*curr=start,*nex=start->next;
        while(prev!=end){
            curr->next=prev;
            prev=curr;
            curr=nex;
            if(nex!=nullptr) nex=nex->next;
        }
    }

    ListNode* reverseKGroup(ListNode* head, int k) {
        if(head==nullptr || head->next==nullptr || k==1){
            return head;
        }
        ListNode* start=head, *end=head;
        int inc=k-1;
        while(inc--){
            end=end->next;
            if(end==nullptr)return head;
        }
        
        ListNode *nextHead = reverseKGroup(end->next,k);
        reverse(start,end);
        start->next=nextHead;
        return end;
    }
};