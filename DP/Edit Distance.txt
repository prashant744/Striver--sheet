class Solution {
public:
    int minDistance(string word1, string word2) {
        int n=word1.size();
        int m=word2.size();
        vector<int>prev(m+1,0),curr(m+1,0);
        for(int i=0;i<=m;i++) prev[i]=i;

        for(int i=1;i<=n;i++){
            curr[0]=i;
            for(int j=1;j<=m;j++){
                if(word1[i-1]==word2[j-1]){
                    curr[j]=0+prev[j-1];
                }else{
                    curr[j]=1+min(prev[j],min(prev[j-1],curr[j-1]));
                }
            }
            prev=curr;
        }
        return prev[m];
    }
};




/////***********   using 2D Matrix **********///


class Solution {
public:
    int helper(int i,int j,string &s1,string &s2,vector<vector<int>>&dp){
        if(i<0)return j+1;
        if(j<0)return i+1;

        if(dp[i][j]!=-1)return dp[i][j];
        if(s1[i]==s2[j])return dp[i][j]=helper(i-1,j-1,s1,s2,dp);

        return dp[i][j]=1+ min(helper(i-1,j,s1,s2,dp),min(helper(i,j-1,s1,s2,dp),helper(i-1,j-1,s1,s2,dp)));
    }

    int minDistance(string word1, string word2) {
        int n=word1.size();
        int m=word2.size();

        vector<vector<int>>dp(n,vector<int>(m,-1));
        return helper(n-1,m-1,word1,word2,dp);
    }
};