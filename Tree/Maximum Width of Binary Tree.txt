/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        queue<pair<TreeNode* ,long long>>q;
        q.push({root,0});
        long long ans=0;
        while(!q.empty()){
            int size=q.size();
            long long leftMost,rightMost;
            long long minIndex=q.front().second;

            for(int i=0;i<size;i++){
                auto curr=q.front();
                q.pop();
                long long index=curr.second-minIndex;
                auto node=curr.first;
                if(i==0)leftMost=index;
                if(i==size-1)rightMost=index;

                if(node->left) q.push({node->left,2*index+1});
                if(node->right) q.push({node->right,2*index+2});
            }
            ans=max(ans,rightMost-leftMost+1);
        }
        return ans;
    }
};